la prochaine fois collab avec l'ordi linux
- Clustering
- Predict whether group will survive
- histograms, graphs, boxplots of scores
- visu across pads
- quick analysis of wikis
- save researches
- run iteratively, memorize on DB to run live?
- editing

def build_operation_context(pad, delay_sync, time_to_reset_day, time_to_reset_break):
    """
    Build the context of each operation progressively added to the pad. The context is a dictionary containing whether a
     pad is synchronous wih an other author in the pad or in the paragraph and it contains list of authors accordingly.

    :param pad:
    :param delay_sync: delay of synchronization between two authors
    :param time_to_reset_day: Number of milliseconds between two ops to indicate the first op of the day, by default 8h
    :param time_to_reset_break: Number of milliseconds to indicate the first op after a break, by default 10min
    :return: None
    """
    # Iterate over all Operation of each Paragraph which is the same as to iterate all iterations of the pad
    # op_index is the Operation index of the overall Pad
    op_index = 0
    pad_operations = pad.operations
    len_pad = len(pad.get_text())

    for para in pad.paragraphs:
        abs_length_para = 0
        para_ops = para.operations
        for op in para_ops:
            # Initialize the context
            len_op = abs(op.get_length_of_op())
            op.context['synchronous_in_pad'] = False
            op.context['synchronous_in_pad_with'] = []
            op.context['synchronous_in_paragraph'] = False
            op.context['synchronous_in_paragraph_with'] = []
            op.context['first_op_day'] = False
            op.context['first_op_break'] = False
            start_time = op.timestamp_start
            end_time = op.timestamp_end

            # Compute the overall length of the paragraph
            abs_length_para += abs(op.get_length_of_op())

            # Check in the pad if the other operations are written by someone else at the same time (+ some delay)
            op_index = 0
            for other_op in pad_operations:
                other_start_time = other_op.timestamp_start
                # Control if this is the current operation to do some processing on it
                if other_op == op:
                    # Check if the op is a first one
                    if op_index == 0 or other_start_time >= pad_operations[op_index - 1].timestamp_end + time_to_reset_day:
                        op.context['first_op_day'] = True
                    elif op_index != 0 and other_start_time >= pad_operations[op_index - 1].timestamp_end + time_to_reset_break:
                        op.context['first_op_break'] = True
                op_index += 1
                if other_op.author != op.author and end_time + delay_sync >= other_start_time >= start_time - delay_sync:
                    op.context['synchronous_in_pad'] = True
                    op.context['synchronous_in_pad_with'].append(other_op.author)
                    if other_op in para_ops:
                        op.context['synchronous_in_paragraph'] = True
                        op.context['synchronous_in_paragraph_with'].append(other_op.author)

            # Compute proportions
            op.context['proportion_pad'] = len_op / len_pad
            op.context['proportion_paragraph'] = len_op
        # Once we computed the absolute length of the paragraph, we compute the proportion (it is positive)
        for op in para_ops:
            op.context['proportion_paragraph'] /= abs_length_para